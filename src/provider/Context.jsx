import { getOrigin } from "@/config/conf";
import { createContext, useContext, useEffect, useState } from "react";
import toast, { Toaster } from "react-hot-toast";
import io from "socket.io-client"

const myContext = createContext(null);

export const useMyContext = () => {
    return useContext(myContext);
};

const Provider = ({ children }) => {
    const [isServerStart, setisServerStart] = useState(false);
    const [pin, setPin] = useState("0000");

    useEffect(() => {
        if (window.location.pathname === "/" || window.location.pathname === "/files") { /** working in host */
            if (isServerStart) {
                toast.success("Host Started!")
                /** generate 4 digin random pin */
                var random = Math.floor(1000 + Math.random() * 9000);
                setPin(random.toString())
            } else {
                if (pin !== "0000") {
                    toast.error("Host Stopped!")
                }
                /** reset the pin */
                setPin("0000");
            }
        } else {
            /** working for client */
            if (isServerStart) {
                toast.success("Client Connected!")
                /** pin will be generated by client: No need to handle code here */
            }else{
                if (pin !== "0000") {
                    toast.error("Client Disconnected!")
                }
            }
        }
    }, [isServerStart])


    return (
        <myContext.Provider value={{
            isServerStart,
            setisServerStart,
            pin, setPin,
        }}>
            {children}
            <Toaster/>
        </myContext.Provider>
    )
}

export default Provider